{"version":3,"sources":["services/FirebaseService.js","globalContext/Reducer.ts","globalContext/Context.tsx","components/Header.tsx","components/Balance.tsx","components/Getexpense.tsx","components/IncomeExpense.tsx","components/Transaction.tsx","components/Addtransaction.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","TransactionReducer","state","action","type","transactions","filter","e","id","initialState","title","amount","addTransactions","deleteTransactions","GlobalContext","createContext","Provider","children","useReducer","dispatch","console","log","Fragment","value","Header","Balance","useContext","TransAmount","map","eachTrans","index","balance","reduce","accum","currentVal","Getexpense","transAmount","getExpense","s","a","c","IncomeExpense","getIcome","Transaction","transObj","onClick","Addtransaction","useState","setTitle","setAmount","onSubmit","preventDefault","newTransaction","Math","floor","random","onChange","target","required","App","useEffect","Notification","requestPermission","then","permission","getToken","currentToken","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0f53d3bd.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC8CbnEy2Vb50Htv9wvDcrRkse0cGa09yI\",\r\n    authDomain: \"expense-tracker-e0eb7.firebaseapp.com\",\r\n    projectId: \"expense-tracker-e0eb7\",\r\n    storageBucket: \"expense-tracker-e0eb7.appspot.com\",\r\n    messagingSenderId: \"814257852279\",\r\n    appId: \"1:814257852279:web:40940b2717b6f14417db72\",\r\n    measurementId: \"G-7YBP5Q5JKX\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nvar messaging = firebase.messaging();\r\n\r\nexport function InitNotification() {\r\n    Notification.requestPermission().then((permission) => {\r\n        console.log('Permission :', permission);\r\n        if (permission === 'granted') {\r\n            messaging.getToken().then((currentToken) => {\r\n                if (currentToken) {\r\n                    console.log('Token Coming :', currentToken);\r\n                }\r\n                else {\r\n                    console.log(\"No registration token available. Request permission to generate one.\");\r\n                }\r\n            }).catch((error) => {\r\n                console.log('An error occurred while retrieving token. ', error);\r\n            })\r\n        }\r\n    })\r\n\r\n}","import { TransactionTypes } from '../Types';\r\n\r\ntype Actions =\r\n    | { type: 'add'; transactions: TransactionTypes }\r\n    | { type: 'delete'; id: number }\r\n\r\nconst TransactionReducer = ((state: { transactions: TransactionTypes[] }, action: Actions) => {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return {\r\n                ...state,\r\n                transactions: [action.transactions, ...state.transactions]\r\n            };\r\n        case 'delete':\r\n            return {\r\n                transactions: state.transactions.filter((e) => e.id !== action.id)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n});\r\n\r\nexport default TransactionReducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport TransactionReducer from './Reducer';\r\nimport { TransactionTypes } from '../Types';\r\n\r\nconst initialState = {\r\n    transactions: [{ id: 1, title: 'Salary', amount: 2000 }],\r\n    addTransactions: (transactions: TransactionTypes) => { },\r\n    deleteTransactions: (id: number) => { },\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const Provider: React.FC = ({ children }) => {\r\n    const [state, dispatch] = useReducer(TransactionReducer, initialState);\r\n    console.log(\"State Context File:\", state)\r\n\r\n    // yaha sa action send karay ga reducer ko data send \r\n    function addTransactions(transactions: TransactionTypes) {\r\n        dispatch({\r\n            type: 'add',\r\n            transactions: transactions\r\n        });\r\n    }\r\n\r\n    function deleteTransactions(id: number) {\r\n        dispatch({\r\n            type: 'delete',\r\n            id: id\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GlobalContext.Provider value={{ transactions: state.transactions, addTransactions, deleteTransactions }}>\r\n                {children}\r\n            </GlobalContext.Provider>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Expense Tracker</h1>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../globalContext/Context';\r\n\r\nconst Balance = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    console.log('transactions :', transactions)\r\n\r\n    var TransAmount = transactions.map((eachTrans, index) => {\r\n        return eachTrans.amount\r\n    })\r\n\r\n    console.log(\"TransAmount Coming Balance File :\", TransAmount);\r\n\r\n    const balance = TransAmount.reduce((accum, currentVal) => accum + currentVal, 0);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Your Balance</h1>\r\n            <br />\r\n            <h3>{balance}</h3>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Balance;","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../globalContext/Context';\r\n\r\nconst Getexpense: React.FC = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const transAmount = transactions.map((eachTrans, index) => {\r\n        return eachTrans.amount\r\n    });\r\n\r\n    console.log('TransAmount :', transAmount);\r\n\r\n    const getExpense = -transAmount.filter((s) => s < 0).reduce((a, c) => a + c, 0)\r\n\r\n    console.log('getExpense :', getExpense);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Getexpense;","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../globalContext/Context';\r\nimport Getexpense from './Getexpense';\r\n\r\nconst IncomeExpense: React.FC = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const transAmount = transactions.map((eachTrans, index) => {\r\n        return eachTrans.amount\r\n    });\r\n    console.log('Income Expense :', transAmount);\r\n\r\n    const getIcome = transAmount.filter((s) => s > 0).reduce((a, c) => a + c, 0);\r\n\r\n    console.log('getIncome :', getIcome);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Get Icome</h1>\r\n            {getIcome}\r\n            <br />\r\n            <h2>Get Expense</h2>\r\n            {Getexpense}\r\n            <br />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default IncomeExpense;\r\n\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../globalContext/Context';\r\n\r\nconst Transaction = () => {\r\n    const { transactions, deleteTransactions } = useContext(GlobalContext);\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <h1>History</h1>\r\n                <ul>\r\n                    {transactions.map((transObj, index) => {\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                <li>\r\n                                    <span>{transObj.title}</span>\r\n                                    <span>{transObj.amount}\r\n                                        <span onClick={() => deleteTransactions(transObj.id)}>\r\n                                            X\r\n                                        </span>\r\n                                    </span>\r\n                                </li>\r\n                            </React.Fragment>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Transaction;","import React, { useContext, useState } from 'react';\r\nimport { GlobalContext } from '../globalContext/Context';\r\n\r\nconst Addtransaction: React.FC = () => {\r\n\r\n    const { addTransactions } = useContext(GlobalContext);\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [amount, setAmount] = useState<number | string>(\"\");\r\n\r\n    function handleSubmit(e: { preventDefault: () => void }) {\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            title,\r\n            amount: +amount\r\n        };\r\n        addTransactions(newTransaction);\r\n        setTitle('');\r\n        setAmount('');\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Add New Transactions</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Text</label>\r\n                    <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n                </div>\r\n                <div>\r\n                    <label>Amount</label>\r\n                    <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} required />\r\n                </div>\r\n                <button>Add Transaction</button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Addtransaction;","import React, { useEffect } from 'react';\nimport './App.css';\nimport { InitNotification } from './services/FirebaseService.js';\nimport { Provider } from './globalContext/Context';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpense from './components/IncomeExpense';\nimport Transaction from './components/Transaction';\nimport Addtransaction from './components/Addtransaction';\n\nfunction App() {\n\n  useEffect(() => {\n    InitNotification();\n  }, []);\n\n  return (\n    <div>\n      <Provider>\n        <Header />\n        <br />\n        <Balance />\n        <br />\n        <IncomeExpense />\n        <br />\n        <Transaction />\n        <br />\n        <Addtransaction />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}